buildscript 
{
    repositories 
    {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.yaml:snakeyaml:1.18'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

group = "mchorse.aperture"
archivesBaseName = "aperture"
sourceCompatibility = targetCompatibility = "1.8"

compileJava 
{
    sourceCompatibility = targetCompatibility = "1.8"
}

/* Minecraft configuration */

minecraft 
{
    version = "${mc_version}-${forge_version}"
    runDir = "run"
    mappings = snapshot
    
    clientJvmArgs = ["-Xmx1G"]
    serverJvmArgs = ["-Xmx1G"]
    
    replace "@VERSION@", project.version
}

processResources
{
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    project.version += "-" + project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

/* Build language files from YML */

task buildLangFiles {
    doLast {
        def help = file("help")
        def flatten
        
        /**
         * Flattens the map
         */
        flatten = { Map map, Map original, String prefix ->
            for (entry in original.entrySet())
            {
                def value = entry.getValue();
                
                if (value instanceof String)
                {
                    map.put(prefix + entry.getKey(), value)
                }
                else if (value instanceof Map)
                {
                    flatten(map, value, prefix + entry.getKey() + ".")
                }
                else
                {
                    map.put(prefix + entry.getKey(), value.toString())
                }
            }
        }
        
        /**
         * Process the string read from the YML.
         * 
         * This method replaces new line symbols to escaped new line symbols
         * and processes {} formatting to ยง Minecraft formatting.
         */
        def processString = { String str ->
            return str.replace("\n", "\\n").replaceAll('\\{([\\w\\d_]+)\\}', 'ยง$1')
        }
        
        /**
         * Compile YML file's contents to ini string
         */
        def compile = {File file ->
            def output = "\n\n# " + file.getName() + "\n";
            def yaml = new org.yaml.snakeyaml.Yaml()
            def map = yaml.load(file.text)
            def flat_map = new HashMap()
            
            flatten(flat_map, map, "")
            
            for (entry in flat_map.entrySet())
            {
                output += "${entry.getKey()}=${processString(entry.getValue())}\n";
            }
            
            return output
        }
        
        /**
         * Convert given langauge dir from YML to ini
         */
        def convert = { File lang_dir ->
            /* Forge directive that allows \n symbols to be allowed in the chat */
            def output = "#PARSE_ESCAPES"
            def output_file = file("src/main/resources/assets/${project.archivesBaseName}/lang/${lang_dir.getName()}.lang")
            
            for (file in lang_dir.listFiles())
            {
                if (file.getName().endsWith(".yml"))
                {
                    output += compile(file)
                }
            }
            
            def parentFile = output_file.getParentFile()
            
            if (!parentFile.exists())
            {
                parentFile.mkdirs();
            }
            
            def writer = new PrintWriter(output_file)
            
            writer.println(output.trim())
            writer.close()
        }
        
        if (help.exists())
        {
            for (lang_dir in help.listFiles())
            {
                if (lang_dir.isDirectory())
                {
                    convert(lang_dir)
                    println "Converted ${lang_dir.getName()} to language file"
                }
            }
        }
        else
        {
            println "Directory 'help' is not found!"
        }
    }
}

tasks.processResources.dependsOn('buildLangFiles')